/* 
    Usage:

    $u: sprite-map("/app/images/sprite/*.png");
    $u2: sprite-map("/app/images/sprite2x/*.png");
    .sprite-block {
        @include sprite(image-name, $u, $u2);
        }
 */
@mixin sprite($name, $sprites, $sprites2x, $dimensions: true, $repeat: no-repeat) {
    @if $dimensions == true {
        @include sprite-dimensions($sprites, $name);
        }
    background-image: sprite-url($sprites);
    background-position: sprite-position($sprites, $name);
    background-repeat: $repeat;

    @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5) {
        & {
            $pos: sprite-position($sprites2x, $name);
            background-image: sprite-url($sprites2x);
            background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
            @include background-size(round(image-width(sprite-path($sprites2x)) / 2) auto);
            }
        }
    }


/* 
    Custom switcher generator

    Config example:
    $switcherConf: (
        default: default background image name, 
        hover: hover background image name,
        hoverChecked: hover checked background image name,
        active: active (pushed) background image name,
        disabled: disabled background image name (disabled attr),
        uncheked: uncheked background image name (just unchecked),
        className: element class, 
        spritePath: sprite path,
        spritePath2x: sprite2x path
    );

    Murkup example:
    <span class="custom-switcher">
        <label>
            <input type="radio" name="name" value="value" checked>
            <b>&nbsp;</b>
        </label>
        <label>
            <input type="radio" name="name2" value="value2">
            <b>&nbsp;</b>
        </label>
    </span>
*/
@mixin switcher($conf) {
    $bgDefault: map-get($conf, 'default');
    $bgHover: map-get($conf, 'hover');
    $bgHoverChecked: map-get($conf, 'hoverChecked');
    $bgActive: map-get($conf, 'active');
    $bgDisabled: map-get($conf, 'disabled');
    $bgUncheked: map-get($conf, 'uncheked');
    $className: map-get($conf, 'className');
    $spritePath: map-get($conf, 'spritePath');
    $spritePath2x: map-get($conf, 'spritePath2x');
    $cursor: default;

    @if $bgHoverChecked != null {
        $cursor: pointer;
    }

    $bgHover: $bgDefault !default;
    $bgHoverChecked: $bgDefault !default;
    $bgActive: $bgDefault !default;
    $bgDisabled: $bgDefault !default;
    $bgUncheked: $bgDisabled !default;

    .#{$className} {
        vertical-align: middle;
        display: inline-block;
        position: relative;
        margin: 0;

        label {
            margin: 0;
            > b {
                display: inline-block;
                cursor: pointer;
                @include retina-sprite($bgUncheked, $spritePath, $spritePath2x);

                &:hover {
                    @include retina-sprite($bgHover, $spritePath, $spritePath2x);
                    }
                &:active {
                    @include retina-sprite($bgActive, $spritePath, $spritePath2x);
                    }
                }
            > input {
                &:not(:checked),
                &:checked {
                    position: absolute;
                    left: -9999px;
                    }
                &:checked + b {
                    @include retina-sprite($bgDefault, $spritePath, $spritePath2x);
                    cursor: $cursor;
                    }
                &:checked + b:hover {
                    @include retina-sprite($bgHoverChecked, $spritePath, $spritePath2x);
                }
                &:disabled + b {
                    @include retina-sprite($bgDisabled, $spritePath, $spritePath2x);
                    cursor: default;
                    }
                }
            }
        }
    }